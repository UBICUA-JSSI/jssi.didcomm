/*
 *  Copyright 2013 The Apache Software Foundation.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package jssi.ursa.credential.prover;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import jssi.ursa.credential.*;
import jssi.ursa.credential.issuer.Issuer;
import jssi.ursa.credential.issuer.IssuerEmulator;
import jssi.ursa.credential.util.BigNumber;
import jssi.ursa.pair.CryptoException;
import jssi.ursa.registry.RevocationRegistryDefinition;
import jssi.ursa.registry.RevocationRegistryDelta;
import jssi.ursa.registry.SimpleTailsAccessor;
import jssi.ursa.registry.Witness;
import org.junit.jupiter.api.Test;


import java.math.BigInteger;

import static jssi.ursa.credential.util.BigNumber.LARGE_MASTER_SECRET;
import static org.junit.jupiter.api.Assertions.*;

class ProverTest {

    private IssuerEmulator issuer = new IssuerEmulator();
    private ProverEmulator prover = new ProverEmulator();

    @Test
    void createMasterSecret(){
        BigInteger result = BigNumber.random(LARGE_MASTER_SECRET);
        assertEquals(LARGE_MASTER_SECRET, result.bitLength());
    }

    @Test
    void checkCredentialKeyCorrectnessProof() {

        String ckcp = "{\"c\":\"37611675737093606611354469283892411880852495117565168932358663398963131397507\"," +
                     "\"xz_cap\":\"81579130320284221659747319740108875652446580605626929564515869699158446225972801134098632494713496313081314380866687966418290227597750899002882970519534702423347828404017509366494708523530025686292969865053261834885716665417122559158656847219251019258307743208838075692695164262680850087806525721184647037789559371016575764323904037635266872661253754958239070844593676990703001641163014837607074604574439994741936613409912802229927895424755757352646030336597690950842465911939873272966620342405909930599727835739699655473154455657878429132861698360924836632047016333549106122684361100949241413364697739541658923119788014990949301155631757300624437448380216292364426202602100074188682993006187\"," +
                     "\"xr_cap\":[[\"sex\",\"800280099800023684394221657855578281425593426428797438278634535803826854973287741112297002561462044581730457464290768546940348121889048006353304776646794823653560200707175243576534399257694825778643847023451169693956070462522652667711052051119060371846591706152099200381794609252833996514839617453462295422079364560725012355479350713908774407072059863925714626035129287654437915380442859411132043551952897474887960834654566958110046975477442837252851593858380406893298039998278146813948374557719947480415431505168848477644721410506100843223565186964968463081686726318431810101100839476456665117568759117498622946466335362502138675885007428245786030655866656241152568981953362753866546347245506\"]," +
                                 "[\"age\",\"588088631461299425903748636894451597454180996508770107860820879608066278697726969676142820725979998876687628461524297952569445512912113947952863000770341397107329530774939533674792868680827566279577518607195225037390604727483704420911912238224219864823492245908348105557153285313698657725038609899106209002384198903035975551652419617009072704552236735717389754124395458798446740853188430442908535423980999434501037185906780341482928855355637070027953698599569975766436241558834373873737728336703980967063844033141464829186289408341005936078717542471679931243178369744750036706021440802187762189222523038598747576436835546143611288733061739572462869076736405341538116562816483588163276630145588\"]," +
                                 "[\"height\",\"553220455491285418654889779078476533199565266037716057819253262456706086296310865820014979289644399892322745082334493480377902246036427120996737141182672228618720768916010742192428961333242647461723166430891725984061962166185290028781330840468287369467210902803713581463138002887245708126181113498506095878475477562185158200076760989353034954621747102865883089591566895303014875251551529870810800964290188402770835695975293408858132429212162793578010820152709965777440582153499339685425754384078776656170709303540365276228433474426237479107459583876421876578975913079855215398240111839997147164550277110095530104844265258104360762567118292063538492192083952712713837994596074547775217382719579\"]," +
                                 "[\"name\",\"383325619072931698489524170594499308335325217367787209202882000237923187775119979058633557703022426956865524033530017842216102964924733310029537256438963746099184641563671420576298749176202668215626084998168583932862834827081323228031589641597768136343232183260789201414439414019145929237988915293970815065021922162304853953719973584719975042952713084160885042865916208477614187377876264496125987756268019899327470534991407455234648438185065303663808513544394761315253646500213994569448735987674657147571753166712102581100080484612181607406695322516789021386859985149430517261727189786324895636842320235453633433344220062995558348664785301570376489352431483740437508437906549673849465012384545\"]]}";

        CredentialKeyCorrectnessProof credentialKeyCorrectnessProof = null;
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            credentialKeyCorrectnessProof = objectMapper.readValue(ckcp, CredentialKeyCorrectnessProof.class);
        } catch (JsonProcessingException e){
            assertNotNull(null);
        }
        assertNotNull(credentialKeyCorrectnessProof);

        String cppk = "{\"n\":\"86665665305306769743640998224032428193374900036388291715266092147536610386173810739519984157965270336632097478597133094406827128255264173203719192251941076854234380657937875659812339068403255817830210066933353759285050420231434817447848623428018855901024003008780452712192795913736482764111358491981149466167261944317488834539736598521002312500014254876871827822649202649309519738154335154609870140475670078398227343824784472798186609231215203087817789245463171907749900122171003521003136568142555330919506366608015786657222086233584954494509284547220890985090423192050178382287421103895144841008791277424496846590741\"," +
                      "\"s\":\"83084163632683971683103510860027729005278842005821378555008971393342897392394093342482468616999826338514906468919119092064240935309882157132018738683925997494322683283644873286332530900221372911048040341879770635765398264433097793470382168370175851530892980676372148031453280943554540985196123749287845370983365759591955970122115501383179848658624899567590986296264637696901386460135503547126706669607760428113275656838469622794704409212798232179158959884444053511985108292873108039408961013644385675435128342006156787386874406242855120817575247911530681953409173281506124827795181567509455566645223216553134031503032\"," +
//                      "\"rms\":\"69540359214451479987976389839616773230804891002271862455489788750024323222733394500266873735434564107738717337220827491008967759706709372565552228384904852634720433291813577752768701243935217183477184067373049521880834253860649384979614391662024054097693432121508214770293387973206706683957445191440404479633757825124711432420521767784744980561784436151749299730486237837674646141707602951431297500069238129179016565225863870295416031631661258637234775727294775109328255742562659112211808214601970739232270739508093496331998175767125907647677454591673824341876899967173912159053625668577289747835336310228049011105497\"," +
                      "\"r\":{\"name\":\"73614884251601813600582203388045085651956041752738830638546275116795417039802182721736430810092702654004453073102067560584416096337783004370774252635058785795031308603877713457768114466947487437017872377059777880761556878710962187533340923809034359538128804737439701806806409957308961705155864645834371173637804141648101201929881187996764636843224817433854456934878290876974385617040959220896441840245127670933144736719991059740420252177851321193552027855601520183643194174630916715502382695700600714805746627413031100287526592940885568497779252694786291104140611371241632211916514383838919499760824668336365583324932\"," +
                             "\"height\":\"32265171152828173132713789140570643111700266065729911854113144982743849278867404735396847699193525729571735553493306628940808000956416968915321660049178547864196558803186466239359868516043720069552027345930404635373118304914324622526461555852237275305473914047266280025696890899994598011931375804216247338150888041648539670793394645189736727715324829416653875431830621713717186359552041360452761091952990177937845471119498327535198904810568194993285480067818837018253517166215847295813814736920370175582896616957506470379883979553529641429454344298317799362993471811350299848771690117490999682821655004195370468488699\"," +
                             "\"age\":\"69210210547019257818547850772050709707382309688606699530323725893459773560538103626922071761954050425702250113423976753292214882085897799387395111502105907983214335565997703927644961496300299895632463495897058156522724703286230283448141168541391892836942725363192216987834154982014295076489073625863422550142489184202964353148888883562845140305191596053910119813840558882592688507644486162029886601540499588388441038704851571799439290300947981481715544121770832266036219326576649318754679877198644972011143938420331953697435689747620330999597118287049144404253273801163402037908352075827948221723974973202563583169029\"," +
                             "\"sex\":\"5971519037640940094397505444316292356065914418354413662186912639811787832463405986659531131133706084880528333584675434816923909544959483919437902975463053732118075030168192272872018865925821857454603799079400957171974895910013062322661909444545643725830160192061905089825121620661836173733315345693314865009989915005759000502383446436810221464568780337079802915890342086506095042145762385725396136006754632851260394335317652166852945930163401043307161826219524803994416323829329312236456379236861294978014561075584507177255338308981019128047314646739471838679506863910116659292783031180706216778151764077702443723295\"," +
                             "\"master_secret\": \"69540359214451479987976389839616773230804891002271862455489788750024323222733394500266873735434564107738717337220827491008967759706709372565552228384904852634720433291813577752768701243935217183477184067373049521880834253860649384979614391662024054097693432121508214770293387973206706683957445191440404479633757825124711432420521767784744980561784436151749299730486237837674646141707602951431297500069238129179016565225863870295416031631661258637234775727294775109328255742562659112211808214601970739232270739508093496331998175767125907647677454591673824341876899967173912159053625668577289747835336310228049011105497\"" +
                        "}," +

                      "\"r\":{\"sex\":\"5971519037640940094397505444316292356065914418354413662186912639811787832463405986659531131133706084880528333584675434816923909544959483919437902975463053732118075030168192272872018865925821857454603799079400957171974895910013062322661909444545643725830160192061905089825121620661836173733315345693314865009989915005759000502383446436810221464568780337079802915890342086506095042145762385725396136006754632851260394335317652166852945930163401043307161826219524803994416323829329312236456379236861294978014561075584507177255338308981019128047314646739471838679506863910116659292783031180706216778151764077702443723295\"," +
                           "\"age\":\"69210210547019257818547850772050709707382309688606699530323725893459773560538103626922071761954050425702250113423976753292214882085897799387395111502105907983214335565997703927644961496300299895632463495897058156522724703286230283448141168541391892836942725363192216987834154982014295076489073625863422550142489184202964353148888883562845140305191596053910119813840558882592688507644486162029886601540499588388441038704851571799439290300947981481715544121770832266036219326576649318754679877198644972011143938420331953697435689747620330999597118287049144404253273801163402037908352075827948221723974973202563583169029\"," +
                           "\"height\":\"32265171152828173132713789140570643111700266065729911854113144982743849278867404735396847699193525729571735553493306628940808000956416968915321660049178547864196558803186466239359868516043720069552027345930404635373118304914324622526461555852237275305473914047266280025696890899994598011931375804216247338150888041648539670793394645189736727715324829416653875431830621713717186359552041360452761091952990177937845471119498327535198904810568194993285480067818837018253517166215847295813814736920370175582896616957506470379883979553529641429454344298317799362993471811350299848771690117490999682821655004195370468488699\"," +
                           "\"name\":\"73614884251601813600582203388045085651956041752738830638546275116795417039802182721736430810092702654004453073102067560584416096337783004370774252635058785795031308603877713457768114466947487437017872377059777880761556878710962187533340923809034359538128804737439701806806409957308961705155864645834371173637804141648101201929881187996764636843224817433854456934878290876974385617040959220896441840245127670933144736719991059740420252177851321193552027855601520183643194174630916715502382695700600714805746627413031100287526592940885568497779252694786291104140611371241632211916514383838919499760824668336365583324932\"," +
                           "\"master_secret\": \"69540359214451479987976389839616773230804891002271862455489788750024323222733394500266873735434564107738717337220827491008967759706709372565552228384904852634720433291813577752768701243935217183477184067373049521880834253860649384979614391662024054097693432121508214770293387973206706683957445191440404479633757825124711432420521767784744980561784436151749299730486237837674646141707602951431297500069238129179016565225863870295416031631661258637234775727294775109328255742562659112211808214601970739232270739508093496331998175767125907647677454591673824341876899967173912159053625668577289747835336310228049011105497\"" +
                        "}," +
                      "\"rctxt\":\"24228185624916991961962522722033145014536714971267927881595876306708625090087873943587238042338121243221012924646178581114559800123476592488566533926756525736648656965761268303310909919204479477384704998557980706682021675823615661983902466146791403727510024640824366557949526383885081089370176066855024067559778863113567573051646482832906197882129941655230936969584340013096005087458997081502931677191413621909541057087395999516425826306677322668329779030018674094652403510183462402288474015372669796858832632923858712304178225982621192335397879717352273004351853493492335932505042039408264279970283524861807398499029\"," +
                      "\"z\":\"37872997963859527792682078354805696750491698208574994141016267688009297894818042895750265909571960338543790691705028130537151406387984323533817281854853188040586780335230980277951542091044326573188687021343455212924263783843075314376017285018682581592125063885274634931746002023241752606715276609073865600094747779631416689289134066495197013137975380131067470474525255115016486667571541756942937282801093910899243018623825563669293619561358219654815146153557959081662796370699327299000703491066556205494543858597953793350653557670249482561691228852566047112200298646525727087592715767034204051762640986863872476786675\"}";

        CredentialPrimaryPublicKey credentialPrimaryPublicKey = null;
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            credentialPrimaryPublicKey = objectMapper.readValue(cppk, CredentialPrimaryPublicKey.class);
        } catch (JsonProcessingException e){
            String error = e.getMessage();
            assertTrue(false, error);
        }
        assertNotNull(credentialPrimaryPublicKey);

        boolean result = CredentialKeyCorrectnessProof.check(credentialPrimaryPublicKey, credentialKeyCorrectnessProof);
        assertTrue(result);

        credentialKeyCorrectnessProof = issuer.getCredentialKeyCorrectnessProof();
        credentialPrimaryPublicKey = issuer.getCredentialPrimaryPublicKey();
        result = CredentialKeyCorrectnessProof.check(credentialPrimaryPublicKey, credentialKeyCorrectnessProof);
        assertTrue(result);
    }

    @Test
    void createBlindedCredentialSecretsCorrectnessProof(){
        CredentialPublicKey credentialPublicKey = issuer.getCredentialPublicKey();
        CredentialKeyCorrectnessProof credentialKeyCorrectnessProof = issuer.getCredentialKeyCorrectnessProof();
        CredentialValues credentialValues = issuer.getCredentialValues();
        BigInteger nonce = issuer.getCredentialNonce();
        BlindedCredentials blindedCredentials = Prover.blindCredentialSecrets(
                credentialPublicKey,
                credentialKeyCorrectnessProof,
                credentialValues,
                nonce);

        assertNotNull(blindedCredentials);
        assertEquals(blindedCredentials.getBlindedCredentialSecrets().u,
                new BigInteger("90379212883377051942444457214004439563879517047934957924109506327827266424864106127396714346970738216284320507530527754324729206801422601992700522417322083581628939167117187181423638437856384315973558857250692265909530560844452355964326255821057551846167569170509524949792604814958417070636632379251447321861706466435758587453671398786938921675857732974923901803378547250372362630279485056161267415391507414010183531088200803261695568846058335634754886427522606528221525388671780017596236038760448329929785833010252968356814800693372830944570065390232033948827218950397755480445898892886723022422888608162061797883541", 10));
        assertEquals(blindedCredentials.getCredentialSecretsBlindingFactors().v_prime,
                new BigInteger("35131625843806290832574870589259287147303302356085937450138681169270844305658441640899780357851554390281352797472151859633451190372182905767740276000477099644043795107449461869975792759973231599572009337886283219344284767785705740629929916685684025616389621432096690068102576167647117576924865030253290356476886389376786906469624913865400296221181743871195998667521041628188272244376790322856843509187067488962831880868979749045372839549034465343690176440012266969614156191820420452812733264350018673445974099278245215963827842041818557926829011513408602244298030173493359464182527821314118075880620818817455331127028576670474022443879858290", 10));
        assertEquals(blindedCredentials.getBlindedCredentialSecretsCorrectnessProof().c,
                new BigInteger("62987495574713125276927020393421215004000405197826691815490873602430880071520", 10));
        assertEquals(blindedCredentials.getBlindedCredentialSecretsCorrectnessProof().m_caps.get("master_secret"),
                new BigInteger("10838856720335086997514321276808275847406618787892605766896852714686897722667846274831751967934281244850533820384194801107183060846242551328524580159640640402707269360579673792415", 10));
    }

    @Test
    void createPrimaryBlindedCredentialSecretsFactors(){

        CredentialPrimaryPublicKey credentialPrimaryPublicKey = issuer.getCredentialPrimaryPublicKey();
        CredentialValues credentialValues = issuer.getCredentialValues();

        PrimaryBlindedCredentialSecretsFactors primaryBlindedCredentialSecretsFactors = PrimaryBlindedCredentialSecretsFactors.create(
                credentialPrimaryPublicKey,
                credentialValues);
        assertNotNull(primaryBlindedCredentialSecretsFactors);
    }

    @Test
    void processCredentialSignature() throws CryptoException {
        CredentialSignature credential_signature = issuer.getCredentialSignature();
        CredentialValues credential_values = issuer.getCredentialValues();
        CredentialPublicKey pk = issuer.getCredentialPublicKey();
        CredentialSecretsBlindingFactors credential_secrets_blinding_factors = prover.getCredentialSecretsBlindingFactors();
        SignatureCorrectnessProof signature_correctness_proof = issuer.getSignatureCorrectnessProof();
        BigInteger nonce = issuer.getCredentialIssuanceNonce();

        Prover.processCredentialSignature(
                credential_signature,
                credential_values,
                signature_correctness_proof,
                credential_secrets_blinding_factors,
                pk,
                nonce,
                null,
                null,
                null);

        assertTrue(true);
    }

    @Test
    void checkUpdateProof() throws CryptoException {

        // 1. Issuer creates credential schema
        CredentialSchema cred_schema = issuer.getCredentialSchema();
        NonCredentialSchema non_cred_schema = issuer.getNonCredentialSchema();
        // 2. Issuer creates credential definition
        CredentialDefinition credentialDefinition = Issuer.createCredentialDefinition(cred_schema, non_cred_schema, true);
        // 3. Issuer creates revocation registry
        int maxCredentials = 100;
        RevocationRegistryDefinition revocationRegistryDefinition = Issuer.createRevocationRegistryDefinition(credentialDefinition.getCredentialPublicKey(), maxCredentials, false);
        SimpleTailsAccessor simple_tail_accessor = SimpleTailsAccessor.create(revocationRegistryDefinition.getRevocationTailsGenerator());

        CredentialValues cred_values = issuer.getCredentialValues();

        // 4. Issuer creates nonce used by Prover to create correctness proof for blinded secrets
        BigInteger credential_nonce = issuer.getCredentialNonce();

        // 5. Prover blinds hidden attributes
        BlindedCredentials blindedCredentials = Prover.blindCredentialSecrets(
                credentialDefinition.getCredentialPublicKey(),
                credentialDefinition.getCredentialKeyCorrectnessProof(),
                cred_values,
                credential_nonce);

        // 6. Prover creates nonce used by Issuer to create correctness proof for signature
        BigInteger cred_issuance_nonce = issuer.getCredentialIssuanceNonce();

        int rev_idx = 1;
        SignedCredential signedCredential = Issuer.signCredentialWithRevocation(
                prover.PROVER_DID,
                blindedCredentials.getBlindedCredentialSecrets(),
                blindedCredentials.getBlindedCredentialSecretsCorrectnessProof(),
                credential_nonce,
                cred_issuance_nonce,
                cred_values,
                credentialDefinition.getCredentialPublicKey(),
                credentialDefinition.getCredentialPrivateKey(),
                rev_idx,
                maxCredentials,
                false,
                revocationRegistryDefinition.getRevocationRegistry(),
                revocationRegistryDefinition.getRevocationPrivateKey(),
                simple_tail_accessor);

        // 7. Prover creates witness
        RevocationRegistryDelta rev_reg_delta = signedCredential.revocationRegistryDelta;
        Witness witness = Witness.create(rev_idx, maxCredentials, false, rev_reg_delta, simple_tail_accessor);

        // 8. Prover processes credential signature
        boolean result = Prover.processCredentialSignature(
                signedCredential.credentialSignature,
                cred_values,
                signedCredential.signatureCorrectnessProof,
                blindedCredentials.getCredentialSecretsBlindingFactors(),
                credentialDefinition.getCredentialPublicKey(),
                cred_issuance_nonce,
                revocationRegistryDefinition.getRevocationPublicKey(),
                revocationRegistryDefinition.getRevocationRegistry(),
                witness);

        assertTrue(result);
    }
}